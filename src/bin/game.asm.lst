------- FILE game.asm LEVEL 1 PASS 2
      1  10000 ????
      2  10000 ????				       processor	6502
      3  10000 ????
      4  10000 ????						; include required files with VCS register memory mapping and macros
      5  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE game.asm
      7  0000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE game.asm
      9  0000 ????
     10  0000 ????
     11  0000 ????						; declare the variables starting from memory address $80
     12  0000 ????
     13 U0087 ????				      seg.u	Variables
     14 U0080					      org	$80
     15 U0080
     16 U0080		       00	   KyleXPos   byte.b
     17 U0081		       00	   KyleYPos   byte.b
     18 U0082		       00 00	   KyleSpritePtr word.w
     19 U0084		       00 00	   KyleColorPtr word.w
     20 U0086		       00	   KyleOffset byte.b
     21 U0087
     22 U0087							; define constants
     23 U0087
     24 U0087		       00 09	   KYLE_HEIGHT =	9
     25 U0087
     26 U0087							; start our ROM code at memory address $F000
     27 U0087
     28  10000 ????				       seg	Code
     29  f000					      org	$F000
     30  f000
     31  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     33  f00b
     34  f00b
     35  f00b							; inititialize variables
     36  f00b
     37  f00b		       a9 32		      lda	#50
     38  f00d		       85 80		      sta	KyleXPos
     39  f00f		       a9 3c		      lda	#60
     40  f011		       85 81		      sta	KyleYPos	; set Kyle x and y
     41  f013
     42  f013		       a9 d6		      lda	#<KyleSprite
     43  f015		       85 82		      sta	KyleSpritePtr
     44  f017		       a9 f2		      lda	#>KyleSprite
     45  f019		       85 83		      sta	KyleSpritePtr+1	; set low and high bytes of the sprite bitmap of Kyle sprite pointer
     46  f01b
     47  f01b		       a9 df		      lda	#<KyleColor
     48  f01d		       85 84		      sta	KyleColorPtr
     49  f01f		       a9 f2		      lda	#>KyleColor
     50  f021		       85 85		      sta	KyleColorPtr+1	; set low and high bytes of the color bitmap of Kyle color pointer
     51  f023
     52  f023
     53  f023							; main loop
     54  f023
     55  f023				   StartFrame
     56  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     57  f023							;; Calculations and tasks performed in the pre-VBlank
     58  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     59  f023		       a5 80		      lda	KyleXPos
     60  f025		       a0 00		      ldy	#0
     61  f027		       20 5a f1 	      jsr	SetObjectXPos	; set player0 horizontal position
     62  f02a		       85 02		      sta	WSYNC
     63  f02c		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
     64  f02e
     65  f02e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     66  f02e							;; Start a new frame by configuring VBLANK and VSYNC
     67  f02e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     68  f02e
     69  f02e		       a9 02		      lda	#02
     70  f030		       85 01		      sta	VBLANK	; turn on VBLANK
     71  f032		       85 00		      sta	VSYNC	; turn on VSYNC
     72  f034
     73  f034							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     74  f034							;; Generate the three lines of VSYNC
     75  f034							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     76  f034		       85 02		      sta	WSYNC
     77  f036		       85 02		      sta	WSYNC
     78  f038		       85 02		      sta	WSYNC
     79  f03a
     80  f03a		       a9 00		      lda	#0
     81  f03c		       85 00		      sta	VSYNC	; turn off VSYNC
     82  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     83  f03e							;; Let the TIA output the 37 recommended lines of VBLANK
     84  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     85  f03e		       a0 25		      ldy	#37
     86  f040				   .VBlankLoop
     87  f040		       85 02		      sta	WSYNC
     88  f042		       88		      dey
     89  f043		       d0 fb		      bne	.VBlankLoop
     90  f045
     91  f045		       a9 00		      lda	#0
     92  f047		       85 01		      sta	VBLANK	; turn VBLANK off
     93  f049
     94  f049							;
     95  f049							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     96  f049							;; Set the CTRLPF register to allow playfield reflect
     97  f049							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f049		       a9 01		      lda	#%00000001	; CTRLPF register (D0 is the reflect flag)
     99  f04b		       85 0a		      sta	CTRLPF	; enable playfield reflection
    100  f04d							;-----------------------------------------------------------------------------
    101  f04d
    102  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    103  f04d							;; Draw the 192 visible scanlines
    104  f04d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    105  f04d
    106  f04d							; Skip 7 scanlines with no PF set
    107  f04d		       a2 00		      ldx	#0
    108  f04f		       86 0d		      stx	PF0
    109  f051		       86 0e		      stx	PF1
    110  f053		       86 0f		      stx	PF2
    111  f055					      REPEAT	7
    112  f055		       85 02		      sta	WSYNC
    111  f055					      REPEND
    112  f057		       85 02		      sta	WSYNC
    111  f057					      REPEND
    112  f059		       85 02		      sta	WSYNC
    111  f059					      REPEND
    112  f05b		       85 02		      sta	WSYNC
    111  f05b					      REPEND
    112  f05d		       85 02		      sta	WSYNC
    111  f05d					      REPEND
    112  f05f		       85 02		      sta	WSYNC
    111  f05f					      REPEND
    112  f061		       85 02		      sta	WSYNC
    113  f063					      REPEND
    114  f063
    115  f063							;------------------------------------------------------------------------------	
    116  f063
    117  f063		       a2 59		      ldx	#89	; x counts the number of remaining scanlines
    118  f065
    119  f065				   PlayfieldLoop
    120  f065		       85 02		      sta	WSYNC	; 3	 (0)
    121  f067		       bd 7c f2 	      lda	PFColors,x	; 4	 (4)
    122  f06a		       85 08		      sta	COLUPF	; 3	 (7)
    123  f06c		       bd 6e f1 	      lda	PF0DataA,x	; 4	 (11)
    124  f06f		       85 0d		      sta	PF0	; 3	 (14)
    125  f071		       bd c8 f1 	      lda	PF1DataA,x	; 4	 (18)
    126  f074		       85 0e		      sta	PF1	; 3	 (21)
    127  f076		       bd 22 f2 	      lda	PF2DataA,x	; 4	 (25*)
    128  f079		       85 0f		      sta	PF2	; 3	 (28)
    129  f07b
    130  f07b				   .InsideKyleSprite
    131  f07b		       8a		      txa
    132  f07c		       38		      sec
    133  f07d		       e5 81		      sbc	KyleYPos
    134  f07f		       c5 09		      cmp	KYLE_HEIGHT
    135  f081		       90 02		      bcc	.DrawSpriteP0
    136  f083		       a9 00		      lda	#0	; save a, set carry flag, subtract Kyle position, compare with height, jump to draw if within bounds
    137  f085
    138  f085				   .DrawSpriteP0
    139  f085		       18		      clc
    140  f086		       65 86		      adc	KyleOffset
    141  f088		       a8		      tay
    142  f089		       b1 82		      lda	(KyleSpritePtr),Y
    143  f08b		       85 02		      sta	WSYNC
    144  f08d		       85 1b		      sta	GRP0
    145  f08f		       b1 84		      lda	(KyleColorPtr),Y
    146  f091		       85 06		      sta	COLUP0	; get offset into y, jump to bitmap location for sprite plus y, load player register, jump to color location plus y, load color 
    147  f093
    148  f093		       ca		      dex		; 2	 (65)
    149  f094		       d0 cf		      bne	PlayfieldLoop
    150  f096
    151  f096		       a9 00		      lda	#0
    152  f098		       85 86		      sta	KyleOffset	; reset jet animation frame to zero each frame
    153  f09a
    154  f09a		       85 02		      sta	WSYNC	; wait for a scanline
    155  f09c
    156  f09c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    157  f09c							;; Output 49 more VBLANK overscan lines to complete our frame
    158  f09c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    159  f09c		       a9 02		      lda	#2
    160  f09e		       85 01		      sta	VBLANK	; enable VBLANK back again
    161  f0a0					      REPEAT	49
    162  f0a0		       85 02		      sta	WSYNC
    161  f0a0					      REPEND
    162  f0a2		       85 02		      sta	WSYNC
    161  f0a2					      REPEND
    162  f0a4		       85 02		      sta	WSYNC
    161  f0a4					      REPEND
    162  f0a6		       85 02		      sta	WSYNC
    161  f0a6					      REPEND
    162  f0a8		       85 02		      sta	WSYNC
    161  f0a8					      REPEND
    162  f0aa		       85 02		      sta	WSYNC
    161  f0aa					      REPEND
    162  f0ac		       85 02		      sta	WSYNC
    161  f0ac					      REPEND
    162  f0ae		       85 02		      sta	WSYNC
    161  f0ae					      REPEND
    162  f0b0		       85 02		      sta	WSYNC
    161  f0b0					      REPEND
    162  f0b2		       85 02		      sta	WSYNC
    161  f0b2					      REPEND
    162  f0b4		       85 02		      sta	WSYNC
    161  f0b4					      REPEND
    162  f0b6		       85 02		      sta	WSYNC
    161  f0b6					      REPEND
    162  f0b8		       85 02		      sta	WSYNC
    161  f0b8					      REPEND
    162  f0ba		       85 02		      sta	WSYNC
    161  f0ba					      REPEND
    162  f0bc		       85 02		      sta	WSYNC
    161  f0bc					      REPEND
    162  f0be		       85 02		      sta	WSYNC
    161  f0be					      REPEND
    162  f0c0		       85 02		      sta	WSYNC
    161  f0c0					      REPEND
    162  f0c2		       85 02		      sta	WSYNC
    161  f0c2					      REPEND
    162  f0c4		       85 02		      sta	WSYNC
    161  f0c4					      REPEND
    162  f0c6		       85 02		      sta	WSYNC
    161  f0c6					      REPEND
    162  f0c8		       85 02		      sta	WSYNC
    161  f0c8					      REPEND
    162  f0ca		       85 02		      sta	WSYNC
    161  f0ca					      REPEND
    162  f0cc		       85 02		      sta	WSYNC
    161  f0cc					      REPEND
    162  f0ce		       85 02		      sta	WSYNC
    161  f0ce					      REPEND
    162  f0d0		       85 02		      sta	WSYNC
    161  f0d0					      REPEND
    162  f0d2		       85 02		      sta	WSYNC
    161  f0d2					      REPEND
    162  f0d4		       85 02		      sta	WSYNC
    161  f0d4					      REPEND
    162  f0d6		       85 02		      sta	WSYNC
    161  f0d6					      REPEND
    162  f0d8		       85 02		      sta	WSYNC
    161  f0d8					      REPEND
    162  f0da		       85 02		      sta	WSYNC
    161  f0da					      REPEND
    162  f0dc		       85 02		      sta	WSYNC
    161  f0dc					      REPEND
    162  f0de		       85 02		      sta	WSYNC
    161  f0de					      REPEND
    162  f0e0		       85 02		      sta	WSYNC
    161  f0e0					      REPEND
    162  f0e2		       85 02		      sta	WSYNC
    161  f0e2					      REPEND
    162  f0e4		       85 02		      sta	WSYNC
    161  f0e4					      REPEND
    162  f0e6		       85 02		      sta	WSYNC
    161  f0e6					      REPEND
    162  f0e8		       85 02		      sta	WSYNC
    161  f0e8					      REPEND
    162  f0ea		       85 02		      sta	WSYNC
    161  f0ea					      REPEND
    162  f0ec		       85 02		      sta	WSYNC
    161  f0ec					      REPEND
    162  f0ee		       85 02		      sta	WSYNC
    161  f0ee					      REPEND
    162  f0f0		       85 02		      sta	WSYNC
    161  f0f0					      REPEND
    162  f0f2		       85 02		      sta	WSYNC
    161  f0f2					      REPEND
    162  f0f4		       85 02		      sta	WSYNC
    161  f0f4					      REPEND
    162  f0f6		       85 02		      sta	WSYNC
    161  f0f6					      REPEND
    162  f0f8		       85 02		      sta	WSYNC
    161  f0f8					      REPEND
    162  f0fa		       85 02		      sta	WSYNC
    161  f0fa					      REPEND
    162  f0fc		       85 02		      sta	WSYNC
    161  f0fc					      REPEND
    162  f0fe		       85 02		      sta	WSYNC
    161  f0fe					      REPEND
    162  f100		       85 02		      sta	WSYNC
    163  f102					      REPEND
    164  f102
    165  f102							; Skip 7 scanlines with no PF set
    166  f102		       a2 00		      ldx	#0
    167  f104		       86 0d		      stx	PF0
    168  f106		       86 0e		      stx	PF1
    169  f108		       86 0f		      stx	PF2
    170  f10a					      REPEAT	7
    171  f10a		       85 02		      sta	WSYNC
    170  f10a					      REPEND
    171  f10c		       85 02		      sta	WSYNC
    170  f10c					      REPEND
    171  f10e		       85 02		      sta	WSYNC
    170  f10e					      REPEND
    171  f110		       85 02		      sta	WSYNC
    170  f110					      REPEND
    171  f112		       85 02		      sta	WSYNC
    170  f112					      REPEND
    171  f114		       85 02		      sta	WSYNC
    170  f114					      REPEND
    171  f116		       85 02		      sta	WSYNC
    172  f118					      REPEND
    173  f118
    174  f118							; check joystick
    175  f118				   CheckP0Up
    176  f118		       a9 10		      lda	#%00010000	; player0 joystick up
    177  f11a		       2c 80 02 	      bit	SWCHA
    178  f11d		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    179  f11f		       e6 81		      inc	KyleYPos
    180  f121		       a9 00		      lda	#0
    181  f123		       85 86		      sta	KyleOffset	; reset sprite animation to first frame
    182  f125				   CheckP0Down
    183  f125		       a9 20		      lda	#%00100000	; player0 joystick down
    184  f127		       2c 80 02 	      bit	SWCHA
    185  f12a		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    186  f12c		       c6 81		      dec	KyleYPos
    187  f12e		       a9 00		      lda	#0
    188  f130		       85 86		      sta	KyleOffset	; reset sprite animation to first frame
    189  f132
    190  f132				   CheckP0Left
    191  f132		       a9 40		      lda	#%01000000	; player0 joystick left
    192  f134		       2c 80 02 	      bit	SWCHA
    193  f137		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    194  f139		       c6 80		      dec	KyleXPos
    195  f13b		       a5 09		      lda	KYLE_HEIGHT	; 9
    196  f13d		       85 86		      sta	KyleOffset	; set animation offset to the second frame
    197  f13f
    198  f13f				   CheckP0Right
    199  f13f		       a9 80		      lda	#%10000000	; player0 joystick right
    200  f141		       2c 80 02 	      bit	SWCHA
    201  f144		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    202  f146		       e6 80		      inc	KyleXPos
    203  f148		       a5 09		      lda	KYLE_HEIGHT	; 9
    204  f14a		       85 86		      sta	KyleOffset	; set animation offset to the second frame
    205  f14c
    206  f14c				   EndInputCheck		; fallback when no input was performed
    207  f14c
    208  f14c							; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    209  f14c							; ;; Calculations to update position for next frame
    210  f14c							; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f14c							; UpdateBomberPosition:
    212  f14c							;     lda  KyleYPos
    213  f14c							;     clc
    214  f14c							;     cmp #0			; compare bomber y-position with 0
    215  f14c							;     bmi .ResetKylePosition ; if it is < 0, then reset y-position to the top
    216  f14c							;     dec KyleYPos	      ; else, decrement enemy y-position for next frame
    217  f14c							;     jmp EndPositionUpdate
    218  f14c							; .ResetKylePosition
    219  f14c							;     lda #96
    220  f14c							;     sta KyleYPos
    221  f14c							;				 ; TODO: set bomber X position to random number
    222  f14c							; EndPositionUpdate:		; fallback for the position update code
    223  f14c
    224  f14c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    225  f14c							;; Check for object collision
    226  f14c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    227  f14c							; CheckCollisionP0P1:
    228  f14c							;     lda #%10000000		; CXPPMM bit 7 detects P0 and P1 collision
    229  f14c							;     bit CXPPMM		; check CXPPMM bit 7 with the above pattern
    230  f14c							;     bne .CollisionP0P1	; if collision between P0 and P1 happened, branch
    231  f14c							;     jmp CheckCollisionP0PF	; else, skip to next check
    232  f14c							; .CollisionP0P1:
    233  f14c							;     jsr GameOver		; call GameOver subroutine
    234  f14c
    235  f14c				   CheckCollisionP0PF
    236  f14c		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    237  f14e		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    238  f150		       d0 03		      bne	.CollisionP0PF	; if collision P0 and PF happened, branch
    239  f152		       4c 55 f1 	      jmp	EndCollisionCheck	; else, skip to next check
    240  f155				   .CollisionP0PF
    241  f155							; jsr GameOver 	    ; call GameOver subroutine
    242  f155
    243  f155				   EndCollisionCheck		; fallback
    244  f155		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    245  f157
    246  f157							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    247  f157							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    248  f157							;; Loop to next frame
    249  f157							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    250  f157		       4c 23 f0 	      jmp	StartFrame
    251  f15a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    252  f15a							;; Subroutine to handle object horizontal position with fine offset
    253  f15a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    254  f15a							;; A is the target x-coordinate position in pixels of our object
    255  f15a							;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    256  f15a							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    257  f15a				   SetObjectXPos subroutine
    258  f15a		       85 02		      sta	WSYNC	; start a fresh new scanline
    259  f15c		       38		      sec		; make sure carry-flag is set before subtracion
    260  f15d				   .Div15Loop
    261  f15d		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    262  f15f		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    263  f161		       49 07		      eor	#7	; handle offset range from -8 to 7
    264  f163		       0a		      asl
    265  f164		       0a		      asl
    266  f165		       0a		      asl
    267  f166		       0a		      asl		; four shift lefts to get only the top 4 bits
    268  f167		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    269  f16a		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    270  f16d		       60		      rts
    271  f16e
    272  f16e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    273  f16e							;; Declare ROM lookup tables
    274  f16e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    275  f16e
    276  f16e				   PF0DataA
    277  f16e		       00		      .byte.b	%00000000
    278  f16f		       00		      .byte.b	%00000000
    279  f170		       00		      .byte.b	%00000000
    280  f171		       00		      .byte.b	%00000000
    281  f172		       80		      .byte.b	%10000000
    282  f173		       80		      .byte.b	%10000000
    283  f174		       80		      .byte.b	%10000000
    284  f175		       80		      .byte.b	%10000000
    285  f176		       80		      .byte.b	%10000000
    286  f177		       80		      .byte.b	%10000000
    287  f178		       80		      .byte.b	%10000000
    288  f179		       80		      .byte.b	%10000000
    289  f17a		       80		      .byte.b	%10000000
    290  f17b		       80		      .byte.b	%10000000
    291  f17c		       80		      .byte.b	%10000000
    292  f17d		       80		      .byte.b	%10000000
    293  f17e		       80		      .byte.b	%10000000
    294  f17f		       80		      .byte.b	%10000000
    295  f180		       80		      .byte.b	%10000000
    296  f181		       80		      .byte.b	%10000000
    297  f182		       80		      .byte.b	%10000000
    298  f183		       80		      .byte.b	%10000000
    299  f184		       80		      .byte.b	%10000000
    300  f185		       00		      .byte.b	%00000000
    301  f186		       00		      .byte.b	%00000000
    302  f187		       00		      .byte.b	%00000000
    303  f188		       00		      .byte.b	%00000000
    304  f189		       00		      .byte.b	%00000000
    305  f18a		       00		      .byte.b	%00000000
    306  f18b		       00		      .byte.b	%00000000
    307  f18c		       00		      .byte.b	%00000000
    308  f18d		       00		      .byte.b	%00000000
    309  f18e		       00		      .byte.b	%00000000
    310  f18f		       00		      .byte.b	%00000000
    311  f190		       00		      .byte.b	%00000000
    312  f191		       00		      .byte.b	%00000000
    313  f192		       00		      .byte.b	%00000000
    314  f193		       00		      .byte.b	%00000000
    315  f194		       00		      .byte.b	%00000000
    316  f195		       00		      .byte.b	%00000000
    317  f196		       00		      .byte.b	%00000000
    318  f197		       00		      .byte.b	%00000000
    319  f198		       00		      .byte.b	%00000000
    320  f199		       00		      .byte.b	%00000000
    321  f19a		       00		      .byte.b	%00000000
    322  f19b		       00		      .byte.b	%00000000
    323  f19c		       00		      .byte.b	%00000000
    324  f19d		       00		      .byte.b	%00000000
    325  f19e		       00		      .byte.b	%00000000
    326  f19f		       00		      .byte.b	%00000000
    327  f1a0		       00		      .byte.b	%00000000
    328  f1a1		       00		      .byte.b	%00000000
    329  f1a2		       00		      .byte.b	%00000000
    330  f1a3		       00		      .byte.b	%00000000
    331  f1a4		       00		      .byte.b	%00000000
    332  f1a5		       00		      .byte.b	%00000000
    333  f1a6		       00		      .byte.b	%00000000
    334  f1a7		       00		      .byte.b	%00000000
    335  f1a8		       00		      .byte.b	%00000000
    336  f1a9		       00		      .byte.b	%00000000
    337  f1aa		       00		      .byte.b	%00000000
    338  f1ab		       00		      .byte.b	%00000000
    339  f1ac		       00		      .byte.b	%00000000
    340  f1ad		       00		      .byte.b	%00000000
    341  f1ae		       00		      .byte.b	%00000000
    342  f1af		       00		      .byte.b	%00000000
    343  f1b0		       80		      .byte.b	%10000000
    344  f1b1		       80		      .byte.b	%10000000
    345  f1b2		       80		      .byte.b	%10000000
    346  f1b3		       80		      .byte.b	%10000000
    347  f1b4		       80		      .byte.b	%10000000
    348  f1b5		       80		      .byte.b	%10000000
    349  f1b6		       80		      .byte.b	%10000000
    350  f1b7		       80		      .byte.b	%10000000
    351  f1b8		       80		      .byte.b	%10000000
    352  f1b9		       80		      .byte.b	%10000000
    353  f1ba		       80		      .byte.b	%10000000
    354  f1bb		       80		      .byte.b	%10000000
    355  f1bc		       80		      .byte.b	%10000000
    356  f1bd		       80		      .byte.b	%10000000
    357  f1be		       80		      .byte.b	%10000000
    358  f1bf		       80		      .byte.b	%10000000
    359  f1c0		       80		      .byte.b	%10000000
    360  f1c1		       80		      .byte.b	%10000000
    361  f1c2		       80		      .byte.b	%10000000
    362  f1c3		       00		      .byte.b	%00000000
    363  f1c4		       00		      .byte.b	%00000000
    364  f1c5		       00		      .byte.b	%00000000
    365  f1c6		       00		      .byte.b	%00000000
    366  f1c7		       00		      .byte.b	%00000000
    367  f1c8
    368  f1c8				   PF1DataA
    369  f1c8		       00		      .byte.b	%00000000
    370  f1c9		       00		      .byte.b	%00000000
    371  f1ca		       00		      .byte.b	%00000000
    372  f1cb		       00		      .byte.b	%00000000
    373  f1cc		       f0		      .byte.b	%11110000
    374  f1cd		       f0		      .byte.b	%11110000
    375  f1ce		       10		      .byte.b	%00010000
    376  f1cf		       10		      .byte.b	%00010000
    377  f1d0		       10		      .byte.b	%00010000
    378  f1d1		       10		      .byte.b	%00010000
    379  f1d2		       10		      .byte.b	%00010000
    380  f1d3		       10		      .byte.b	%00010000
    381  f1d4		       10		      .byte.b	%00010000
    382  f1d5		       10		      .byte.b	%00010000
    383  f1d6		       10		      .byte.b	%00010000
    384  f1d7		       10		      .byte.b	%00010000
    385  f1d8		       10		      .byte.b	%00010000
    386  f1d9		       10		      .byte.b	%00010000
    387  f1da		       10		      .byte.b	%00010000
    388  f1db		       10		      .byte.b	%00010000
    389  f1dc		       10		      .byte.b	%00010000
    390  f1dd		       f0		      .byte.b	%11110000
    391  f1de		       f0		      .byte.b	%11110000
    392  f1df		       00		      .byte.b	%00000000
    393  f1e0		       00		      .byte.b	%00000000
    394  f1e1		       00		      .byte.b	%00000000
    395  f1e2		       00		      .byte.b	%00000000
    396  f1e3		       00		      .byte.b	%00000000
    397  f1e4		       00		      .byte.b	%00000000
    398  f1e5		       00		      .byte.b	%00000000
    399  f1e6		       00		      .byte.b	%00000000
    400  f1e7		       00		      .byte.b	%00000000
    401  f1e8		       00		      .byte.b	%00000000
    402  f1e9		       00		      .byte.b	%00000000
    403  f1ea		       00		      .byte.b	%00000000
    404  f1eb		       00		      .byte.b	%00000000
    405  f1ec		       00		      .byte.b	%00000000
    406  f1ed		       00		      .byte.b	%00000000
    407  f1ee		       00		      .byte.b	%00000000
    408  f1ef		       00		      .byte.b	%00000000
    409  f1f0		       00		      .byte.b	%00000000
    410  f1f1		       00		      .byte.b	%00000000
    411  f1f2		       00		      .byte.b	%00000000
    412  f1f3		       00		      .byte.b	%00000000
    413  f1f4		       00		      .byte.b	%00000000
    414  f1f5		       00		      .byte.b	%00000000
    415  f1f6		       00		      .byte.b	%00000000
    416  f1f7		       00		      .byte.b	%00000000
    417  f1f8		       00		      .byte.b	%00000000
    418  f1f9		       00		      .byte.b	%00000000
    419  f1fa		       00		      .byte.b	%00000000
    420  f1fb		       00		      .byte.b	%00000000
    421  f1fc		       00		      .byte.b	%00000000
    422  f1fd		       00		      .byte.b	%00000000
    423  f1fe		       00		      .byte.b	%00000000
    424  f1ff		       00		      .byte.b	%00000000
    425  f200		       00		      .byte.b	%00000000
    426  f201		       00		      .byte.b	%00000000
    427  f202		       00		      .byte.b	%00000000
    428  f203		       00		      .byte.b	%00000000
    429  f204		       00		      .byte.b	%00000000
    430  f205		       00		      .byte.b	%00000000
    431  f206		       00		      .byte.b	%00000000
    432  f207		       00		      .byte.b	%00000000
    433  f208		       00		      .byte.b	%00000000
    434  f209		       00		      .byte.b	%00000000
    435  f20a		       f0		      .byte.b	%11110000
    436  f20b		       f0		      .byte.b	%11110000
    437  f20c		       10		      .byte.b	%00010000
    438  f20d		       10		      .byte.b	%00010000
    439  f20e		       10		      .byte.b	%00010000
    440  f20f		       10		      .byte.b	%00010000
    441  f210		       10		      .byte.b	%00010000
    442  f211		       10		      .byte.b	%00010000
    443  f212		       10		      .byte.b	%00010000
    444  f213		       10		      .byte.b	%00010000
    445  f214		       10		      .byte.b	%00010000
    446  f215		       10		      .byte.b	%00010000
    447  f216		       10		      .byte.b	%00010000
    448  f217		       10		      .byte.b	%00010000
    449  f218		       10		      .byte.b	%00010000
    450  f219		       10		      .byte.b	%00010000
    451  f21a		       10		      .byte.b	%00010000
    452  f21b		       f0		      .byte.b	%11110000
    453  f21c		       f0		      .byte.b	%11110000
    454  f21d		       00		      .byte.b	%00000000
    455  f21e		       00		      .byte.b	%00000000
    456  f21f		       00		      .byte.b	%00000000
    457  f220		       00		      .byte.b	%00000000
    458  f221		       00		      .byte.b	%00000000
    459  f222
    460  f222				   PF2DataA
    461  f222		       00		      .byte.b	%00000000
    462  f223		       00		      .byte.b	%00000000
    463  f224		       00		      .byte.b	%00000000
    464  f225		       00		      .byte.b	%00000000
    465  f226		       00		      .byte.b	%00000000
    466  f227		       00		      .byte.b	%00000000
    467  f228		       00		      .byte.b	%00000000
    468  f229		       00		      .byte.b	%00000000
    469  f22a		       00		      .byte.b	%00000000
    470  f22b		       00		      .byte.b	%00000000
    471  f22c		       00		      .byte.b	%00000000
    472  f22d		       00		      .byte.b	%00000000
    473  f22e		       00		      .byte.b	%00000000
    474  f22f		       00		      .byte.b	%00000000
    475  f230		       00		      .byte.b	%00000000
    476  f231		       00		      .byte.b	%00000000
    477  f232		       00		      .byte.b	%00000000
    478  f233		       00		      .byte.b	%00000000
    479  f234		       00		      .byte.b	%00000000
    480  f235		       00		      .byte.b	%00000000
    481  f236		       00		      .byte.b	%00000000
    482  f237		       00		      .byte.b	%00000000
    483  f238		       00		      .byte.b	%00000000
    484  f239		       00		      .byte.b	%00000000
    485  f23a		       00		      .byte.b	%00000000
    486  f23b		       00		      .byte.b	%00000000
    487  f23c		       00		      .byte.b	%00000000
    488  f23d		       00		      .byte.b	%00000000
    489  f23e		       00		      .byte.b	%00000000
    490  f23f		       00		      .byte.b	%00000000
    491  f240		       00		      .byte.b	%00000000
    492  f241		       00		      .byte.b	%00000000
    493  f242		       00		      .byte.b	%00000000
    494  f243		       00		      .byte.b	%00000000
    495  f244		       00		      .byte.b	%00000000
    496  f245		       00		      .byte.b	%00000000
    497  f246		       00		      .byte.b	%00000000
    498  f247		       00		      .byte.b	%00000000
    499  f248		       00		      .byte.b	%00000000
    500  f249		       00		      .byte.b	%00000000
    501  f24a		       00		      .byte.b	%00000000
    502  f24b		       00		      .byte.b	%00000000
    503  f24c		       00		      .byte.b	%00000000
    504  f24d		       00		      .byte.b	%00000000
    505  f24e		       00		      .byte.b	%00000000
    506  f24f		       00		      .byte.b	%00000000
    507  f250		       00		      .byte.b	%00000000
    508  f251		       00		      .byte.b	%00000000
    509  f252		       00		      .byte.b	%00000000
    510  f253		       00		      .byte.b	%00000000
    511  f254		       00		      .byte.b	%00000000
    512  f255		       00		      .byte.b	%00000000
    513  f256		       00		      .byte.b	%00000000
    514  f257		       00		      .byte.b	%00000000
    515  f258		       00		      .byte.b	%00000000
    516  f259		       00		      .byte.b	%00000000
    517  f25a		       00		      .byte.b	%00000000
    518  f25b		       00		      .byte.b	%00000000
    519  f25c		       00		      .byte.b	%00000000
    520  f25d		       00		      .byte.b	%00000000
    521  f25e		       00		      .byte.b	%00000000
    522  f25f		       00		      .byte.b	%00000000
    523  f260		       00		      .byte.b	%00000000
    524  f261		       00		      .byte.b	%00000000
    525  f262		       00		      .byte.b	%00000000
    526  f263		       00		      .byte.b	%00000000
    527  f264		       00		      .byte.b	%00000000
    528  f265		       00		      .byte.b	%00000000
    529  f266		       00		      .byte.b	%00000000
    530  f267		       00		      .byte.b	%00000000
    531  f268		       00		      .byte.b	%00000000
    532  f269		       00		      .byte.b	%00000000
    533  f26a		       00		      .byte.b	%00000000
    534  f26b		       00		      .byte.b	%00000000
    535  f26c		       00		      .byte.b	%00000000
    536  f26d		       00		      .byte.b	%00000000
    537  f26e		       00		      .byte.b	%00000000
    538  f26f		       00		      .byte.b	%00000000
    539  f270		       00		      .byte.b	%00000000
    540  f271		       00		      .byte.b	%00000000
    541  f272		       00		      .byte.b	%00000000
    542  f273		       00		      .byte.b	%00000000
    543  f274		       00		      .byte.b	%00000000
    544  f275		       00		      .byte.b	%00000000
    545  f276		       00		      .byte.b	%00000000
    546  f277		       00		      .byte.b	%00000000
    547  f278		       00		      .byte.b	%00000000
    548  f279		       00		      .byte.b	%00000000
    549  f27a		       00		      .byte.b	%00000000
    550  f27b		       00		      .byte.b	%00000000
    551  f27c
    552  f27c				   PFColors
    553  f27c		       0e		      .byte.b	$0E
    554  f27d		       0e		      .byte.b	$0E
    555  f27e		       0e		      .byte.b	$0E
    556  f27f		       0e		      .byte.b	$0E
    557  f280		       0e		      .byte.b	$0E
    558  f281		       0e		      .byte.b	$0E
    559  f282		       0e		      .byte.b	$0E
    560  f283		       0e		      .byte.b	$0E
    561  f284		       0e		      .byte.b	$0E
    562  f285		       0e		      .byte.b	$0E
    563  f286		       0e		      .byte.b	$0E
    564  f287		       0e		      .byte.b	$0E
    565  f288		       0e		      .byte.b	$0E
    566  f289		       0e		      .byte.b	$0E
    567  f28a		       0e		      .byte.b	$0E
    568  f28b		       0e		      .byte.b	$0E
    569  f28c		       0e		      .byte.b	$0E
    570  f28d		       0e		      .byte.b	$0E
    571  f28e		       0e		      .byte.b	$0E
    572  f28f		       0e		      .byte.b	$0E
    573  f290		       0e		      .byte.b	$0E
    574  f291		       0e		      .byte.b	$0E
    575  f292		       0e		      .byte.b	$0E
    576  f293		       0e		      .byte.b	$0E
    577  f294		       0e		      .byte.b	$0E
    578  f295		       0e		      .byte.b	$0E
    579  f296		       0e		      .byte.b	$0E
    580  f297		       0e		      .byte.b	$0E
    581  f298		       0e		      .byte.b	$0E
    582  f299		       0e		      .byte.b	$0E
    583  f29a		       0e		      .byte.b	$0E
    584  f29b		       0e		      .byte.b	$0E
    585  f29c		       0e		      .byte.b	$0E
    586  f29d		       0e		      .byte.b	$0E
    587  f29e		       0e		      .byte.b	$0E
    588  f29f		       0e		      .byte.b	$0E
    589  f2a0		       0e		      .byte.b	$0E
    590  f2a1		       0e		      .byte.b	$0E
    591  f2a2		       0e		      .byte.b	$0E
    592  f2a3		       0e		      .byte.b	$0E
    593  f2a4		       0e		      .byte.b	$0E
    594  f2a5		       0e		      .byte.b	$0E
    595  f2a6		       0e		      .byte.b	$0E
    596  f2a7		       0e		      .byte.b	$0E
    597  f2a8		       0e		      .byte.b	$0E
    598  f2a9		       0e		      .byte.b	$0E
    599  f2aa		       0e		      .byte.b	$0E
    600  f2ab		       0e		      .byte.b	$0E
    601  f2ac		       0e		      .byte.b	$0E
    602  f2ad		       0e		      .byte.b	$0E
    603  f2ae		       0e		      .byte.b	$0E
    604  f2af		       0e		      .byte.b	$0E
    605  f2b0		       0e		      .byte.b	$0E
    606  f2b1		       0e		      .byte.b	$0E
    607  f2b2		       0e		      .byte.b	$0E
    608  f2b3		       0e		      .byte.b	$0E
    609  f2b4		       0e		      .byte.b	$0E
    610  f2b5		       0e		      .byte.b	$0E
    611  f2b6		       0e		      .byte.b	$0E
    612  f2b7		       0e		      .byte.b	$0E
    613  f2b8		       0e		      .byte.b	$0E
    614  f2b9		       0e		      .byte.b	$0E
    615  f2ba		       0e		      .byte.b	$0E
    616  f2bb		       0e		      .byte.b	$0E
    617  f2bc		       0e		      .byte.b	$0E
    618  f2bd		       0e		      .byte.b	$0E
    619  f2be		       0e		      .byte.b	$0E
    620  f2bf		       0e		      .byte.b	$0E
    621  f2c0		       0e		      .byte.b	$0E
    622  f2c1		       0e		      .byte.b	$0E
    623  f2c2		       0e		      .byte.b	$0E
    624  f2c3		       0e		      .byte.b	$0E
    625  f2c4		       0e		      .byte.b	$0E
    626  f2c5		       0e		      .byte.b	$0E
    627  f2c6		       0e		      .byte.b	$0E
    628  f2c7		       0e		      .byte.b	$0E
    629  f2c8		       0e		      .byte.b	$0E
    630  f2c9		       0e		      .byte.b	$0E
    631  f2ca		       0e		      .byte.b	$0E
    632  f2cb		       0e		      .byte.b	$0E
    633  f2cc		       0e		      .byte.b	$0E
    634  f2cd		       0e		      .byte.b	$0E
    635  f2ce		       0e		      .byte.b	$0E
    636  f2cf		       0e		      .byte.b	$0E
    637  f2d0		       0e		      .byte.b	$0E
    638  f2d1		       0e		      .byte.b	$0E
    639  f2d2		       0e		      .byte.b	$0E
    640  f2d3		       0e		      .byte.b	$0E
    641  f2d4		       0e		      .byte.b	$0E
    642  f2d5		       0e		      .byte.b	$0E
    643  f2d6
    644  f2d6
    645  f2d6				   KyleSprite
    646  f2d6		       00		      .byte.b	#%00000000	;
    647  f2d7		       0f		      .byte.b	#%00001111	; #####  
    648  f2d8		       0f		      .byte.b	#%00001111	; #####
    649  f2d9		       0f		      .byte.b	#%00001111	; #####
    650  f2da		       0f		      .byte.b	#%00001111	; #####
    651  f2db		       0f		      .byte.b	#%00001111	; #####
    652  f2dc		       0f		      .byte.b	#%00001111	; ##### 
    653  f2dd		       0f		      .byte.b	#%00001111	; #####   
    654  f2de		       0f		      .byte.b	#%00001111	; #####   
    655  f2df
    656  f2df				   KyleColor
    657  f2df		       00		      .byte.b	#$00
    658  f2e0		       0e		      .byte.b	#$0E
    659  f2e1		       0e		      .byte.b	#$0E
    660  f2e2		       0e		      .byte.b	#$0E
    661  f2e3		       0e		      .byte.b	#$0E
    662  f2e4		       0e		      .byte.b	#$0E
    663  f2e5		       0e		      .byte.b	#$0E
    664  f2e6		       0e		      .byte.b	#$0E
    665  f2e7		       0e		      .byte.b	#$0E
    666  f2e8
    667  f2e8							; complete ROM size with exactly 4KB
    668  f2e8
    669  fffc					      org	$FFFC	; move to position $FFFC
    670  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    671  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
