------- FILE game.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						; include required files with VCS register memory mapping and macros
      4  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE game.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE game.asm
      7  0000 ????
      8  0000 ????
      9  0000 ????						; declare the variables starting from memory address $80
     10  0000 ????
     11 U0089 ????				      seg.u	Variables
     12 U0080					      org	$80
     13 U0080
     14 U0080		       00	   KyleXPos   byte.b
     15 U0081		       00	   KyleYPos   byte.b
     16 U0082		       00 00	   KyleSpritePtr word.w
     17 U0084		       00 00	   KyleColorPtr word.w
     18 U0086		       00	   KyleOffset byte.b
     19 U0087		       00	   SavedXPos  byte.b
     20 U0088		       00	   SavedYPos  byte.b		; saved x and y positions for Kyle and enemy	
     21 U0089
     22 U0089							; define constants
     23 U0089
     24 U0089		       00 09	   KYLE_HEIGHT =	9
     25 U0089		       00 12	   BUILDING_HEIGHT =	18
     26 U0089
     27 U0089							; start our ROM code at memory address $F000
     28 U0089
     29  10000 ????				       seg	Code
     30  f000					      org	$F000
     31  f000
     32  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     34  f00b
     35  f00b
     36  f00b							; inititialize variables
     37  f00b
     38  f00b		       a9 32		      lda	#50
     39  f00d		       85 80		      sta	KyleXPos
     40  f00f		       85 87		      sta	SavedXPos
     41  f011		       a9 3c		      lda	#60
     42  f013		       85 81		      sta	KyleYPos
     43  f015		       85 88		      sta	SavedYPos	; set Kyle x and y
     44  f017
     45  f017		       a9 fe		      lda	#<KyleSprite
     46  f019		       85 82		      sta	KyleSpritePtr
     47  f01b		       a9 f0		      lda	#>KyleSprite
     48  f01d		       85 83		      sta	KyleSpritePtr+1	; set low and high bytes of the sprite bitmap of Kyle sprite pointer
     49  f01f
     50  f01f		       a9 07		      lda	#<KyleColor
     51  f021		       85 84		      sta	KyleColorPtr
     52  f023		       a9 f1		      lda	#>KyleColor
     53  f025		       85 85		      sta	KyleColorPtr+1	; set low and high bytes of the color bitmap of Kyle color pointer
     54  f027
     55  f027
     56  f027							; main loop
     57  f027
     58  f027				   StartFrame
     59  f027
     60  f027							; display VSYNC and VBLANK
     61  f027
     62  f027		       a9 02		      lda	#2
     63  f029		       85 01		      sta	VBLANK	; turn on VBLANK
     64  f02b		       85 00		      sta	VSYNC	; turn on VSYNC
     65  f02d
     66  f02d		       85 02		      sta	WSYNC
     67  f02f		       85 02		      sta	WSYNC
     68  f031		       85 02		      sta	WSYNC
     69  f033
     70  f033		       a9 00		      lda	#0
     71  f035		       85 00		      sta	VSYNC	; turn off VSYNC
     72  f037
     73  f037		       a0 25		      ldy	#37
     74  f039				   .VBlankLoop
     75  f039		       85 02		      sta	WSYNC
     76  f03b		       88		      dey
     77  f03c		       d0 fb		      bne	.VBlankLoop
     78  f03e
     79  f03e		       85 01		      sta	VBLANK	; turn off VBLANK
     80  f040
     81  f040
     82  f040							; display scanlines of game
     83  f040
     84  f040				   GameVisibleLine
     85  f040		       a9 00		      lda	#$0
     86  f042		       85 09		      sta	COLUBK	; set background to black
     87  f044
     88  f044		       a9 0e		      lda	#$0E
     89  f046		       85 08		      sta	COLUPF	; set the terrain background color
     90  f048
     91  f048		       a9 01		      lda	#%00000001
     92  f04a		       85 0a		      sta	CTRLPF	; enable playfield reflection
     93  f04c		       a9 00		      lda	#0
     94  f04e		       85 0d		      sta	PF0	; setting PF0 bit pattern
     95  f050		       a9 04		      lda	#$04
     96  f052		       85 0e		      sta	PF1	; setting PF1 bit pattern
     97  f054		       a9 00		      lda	#0
     98  f056		       85 0f		      sta	PF2	; setting PF2 bit pattern
     99  f058
    100  f058		       a2 60		      ldx	#96	; x counts the number of remaining scanlines
    101  f05a		       a0 14		      ldy	#20
    102  f05c
    103  f05c				   .GameLineLoop
    104  f05c
    105  f05c
    106  f05c				   .InsideKyleSprite
    107  f05c		       8a		      txa
    108  f05d		       38		      sec
    109  f05e		       e5 81		      sbc	KyleYPos
    110  f060		       c5 09		      cmp	KYLE_HEIGHT
    111  f062		       90 02		      bcc	.DrawSpriteP0
    112  f064		       a9 00		      lda	#0	; save a, set carry flag, subtract Kyle position, compare with height, jump to draw if within bounds
    113  f066
    114  f066				   .DrawSpriteP0
    115  f066		       18		      clc
    116  f067		       65 86		      adc	KyleOffset
    117  f069		       a8		      tay
    118  f06a		       b1 82		      lda	(KyleSpritePtr),Y
    119  f06c		       85 02		      sta	WSYNC
    120  f06e		       85 1b		      sta	GRP0
    121  f070		       b1 84		      lda	(KyleColorPtr),Y
    122  f072		       85 06		      sta	COLUP0	; get offset into y, jump to bitmap location for sprite plus y, load player register, jump to color location plus y, load color 
    123  f074
    124  f074		       85 02		      sta	WSYNC
    125  f076
    126  f076		       ca		      dex
    127  f077		       d0 e3		      bne	.GameLineLoop	; decrement x, if not zero jump back up to GameLineLoop
    128  f079
    129  f079		       a9 00		      lda	#0
    130  f07b		       85 86		      sta	KyleOffset	; reset Kyle offset
    131  f07d
    132  f07d		       85 02		      sta	WSYNC
    133  f07f
    134  f07f							; dsplay overscan
    135  f07f
    136  f07f		       a9 02		      lda	#2
    137  f081		       85 01		      sta	VBLANK	; turn on VBLANK again
    138  f083
    139  f083		       a0 25		      ldy	#37
    140  f085				   .OverScanLoop
    141  f085		       85 02		      sta	WSYNC
    142  f087		       88		      dey
    143  f088		       d0 fb		      bne	.OverScanLoop
    144  f08a
    145  f08a		       a9 00		      lda	#0
    146  f08c		       85 01		      sta	VBLANK	; turn off VBLANK
    147  f08e
    148  f08e
    149  f08e
    150  f08e				   TestCollisions
    151  f08e
    152  f08e		       24 02		      bit	CXP0FB	; N=player0/playfield, V=player0/ball
    153  f090		       10 08		      bpl	NoPlayFieldCollision	; if N is off then player0 did not collide with playfield
    154  f092		       a5 87		      lda	SavedXPos	; recall saved X
    155  f094		       85 80		      sta	KyleXPos	; and move player back to it
    156  f096		       a5 88		      lda	SavedYPos	; recall saved Y
    157  f098		       85 81		      sta	KyleYPos	; and move player back to it
    158  f09a
    159  f09a				   NoPlayFieldCollision
    160  f09a		       85 2c		      sta	CXCLR
    161  f09c
    162  f09c							; check joystick
    163  f09c
    164  f09c				   CheckP0Up
    165  f09c		       a9 10		      lda	#%00010000
    166  f09e		       2c 80 02 	      bit	SWCHA
    167  f0a1		       d0 0a		      bne	CheckP0Down
    168  f0a3		       a5 81		      lda	KyleYPos
    169  f0a5		       85 88		      sta	SavedYPos
    170  f0a7		       e6 81		      inc	KyleYPos
    171  f0a9		       a9 00		      lda	#0
    172  f0ab		       85 86		      sta	KyleOffset	; check if joystick up is pressed, if so increment y position, else fall through to next check
    173  f0ad
    174  f0ad				   CheckP0Down
    175  f0ad		       a9 20		      lda	#%00100000
    176  f0af		       2c 80 02 	      bit	SWCHA
    177  f0b2		       d0 0a		      bne	CheckP0Left
    178  f0b4		       a5 81		      lda	KyleYPos
    179  f0b6		       85 88		      sta	SavedYPos
    180  f0b8		       c6 81		      dec	KyleYPos
    181  f0ba		       a9 00		      lda	#0
    182  f0bc		       85 86		      sta	KyleOffset	; check if joystick down is pressed, if so decrement y position, else fall through to end checks
    183  f0be
    184  f0be				   CheckP0Left
    185  f0be		       a9 40		      lda	#%01000000
    186  f0c0		       2c 80 02 	      bit	SWCHA
    187  f0c3		       d0 0a		      bne	CheckP0Right
    188  f0c5		       a5 80		      lda	KyleXPos
    189  f0c7		       85 87		      sta	SavedXPos
    190  f0c9		       c6 80		      dec	KyleXPos
    191  f0cb		       a9 00		      lda	#0
    192  f0cd		       85 86		      sta	KyleOffset	; check if joystick down is pressed, if so decrement y position, else fall through to end checks
    193  f0cf
    194  f0cf				   CheckP0Right
    195  f0cf		       a9 80		      lda	#%10000000
    196  f0d1		       2c 80 02 	      bit	SWCHA
    197  f0d4		       d0 0a		      bne	EndInputCheck
    198  f0d6		       a5 80		      lda	KyleXPos
    199  f0d8		       85 87		      sta	SavedXPos
    200  f0da		       e6 80		      inc	KyleXPos
    201  f0dc		       a9 00		      lda	#0
    202  f0de		       85 86		      sta	KyleOffset	; check if joystick down is pressed, if so decrement y position, else fall through to end checks
    203  f0e0
    204  f0e0				   EndInputCheck
    205  f0e0
    206  f0e0
    207  f0e0
    208  f0e0
    209  f0e0
    210  f0e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    211  f0e0							;; Set player horizontal position while in VBLANK
    212  f0e0							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    213  f0e0		       a5 80		      lda	KyleXPos	; load register A with desired X position
    214  f0e2		       29 7f		      and	#$7F	; same as AND 01111111, forces bit 7 to zero
    215  f0e4							; keeping the result positive
    216  f0e4
    217  f0e4		       38		      sec		; set carry flag before subtraction
    218  f0e5
    219  f0e5		       85 02		      sta	WSYNC	; wait for next scanline
    220  f0e7		       85 2b		      sta	HMCLR	; clear old horizontal position values
    221  f0e9
    222  f0e9				   DivideLoop
    223  f0e9		       e9 0f		      sbc	#15	; Subtract 15 from A
    224  f0eb		       b0 fc		      bcs	DivideLoop	; loop while carry flag is still set
    225  f0ed
    226  f0ed		       49 07		      eor	#7	; adjust the remainder in A between -8 and 7
    227  f0ef		       0a		      asl		; shift left by 4, as HMP0 uses only 4 bits
    228  f0f0		       0a		      asl
    229  f0f1		       0a		      asl
    230  f0f2		       0a		      asl
    231  f0f3		       85 20		      sta	HMP0	; set smooth position value
    232  f0f5		       85 10		      sta	RESP0	; fix rough position
    233  f0f7		       85 02		      sta	WSYNC	; wait for next scanline
    234  f0f9		       85 2a		      sta	HMOVE	; apply the fine position offset
    235  f0fb							;-------------------------------------------------------------------------------------------------------------------------------
    236  f0fb							; end of main loop, jump back to start 
    237  f0fb
    238  f0fb		       4c 27 f0 	      jmp	StartFrame
    239  f0fe
    240  f0fe							; sprite and color bitmaps
    241  f0fe
    242  f0fe				   KyleSprite
    243  f0fe		       00		      .byte.b	#%00000000	;
    244  f0ff		       0f		      .byte.b	#%00001111	; #####  
    245  f100		       0f		      .byte.b	#%00001111	; #####
    246  f101		       0f		      .byte.b	#%00001111	; #####
    247  f102		       0f		      .byte.b	#%00001111	; #####
    248  f103		       0f		      .byte.b	#%00001111	; #####
    249  f104		       0f		      .byte.b	#%00001111	; ##### 
    250  f105		       0f		      .byte.b	#%00001111	; #####   
    251  f106		       0f		      .byte.b	#%00001111	; #####   
    252  f107
    253  f107				   KyleColor
    254  f107		       00		      .byte.b	#$00
    255  f108		       0e		      .byte.b	#$0E
    256  f109		       0e		      .byte.b	#$0E
    257  f10a		       0e		      .byte.b	#$0E
    258  f10b		       0e		      .byte.b	#$0E
    259  f10c		       0e		      .byte.b	#$0E
    260  f10d		       0e		      .byte.b	#$0E
    261  f10e		       0e		      .byte.b	#$0E
    262  f10f		       0e		      .byte.b	#$0E
    263  f110
    264  f110							; complete ROM size with exactly 4KB
    265  f110
    266  fffc					      org	$FFFC	; move to position $FFFC
    267  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    268  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
