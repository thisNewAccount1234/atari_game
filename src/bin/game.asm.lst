------- FILE game.asm LEVEL 1 PASS 2
      1  10000 ????						;     processor 6502
      2  10000 ????
      3  10000 ????						; ; include required files with VCS register memory mapping and macros
      4  10000 ????
      5  10000 ????						;     include "vcs.h"
      6  10000 ????						;     include "macro.h"
      7  10000 ????
      8  10000 ????
      9  10000 ????						; ; declare the variables starting from memory address $80
     10  10000 ????
     11  10000 ????						;     seg.u Variables
     12  10000 ????						;     org $80
     13  10000 ????
     14  10000 ????						; KyleXPos	    byte	 
     15  10000 ????						; KyleYPos	    byte	 
     16  10000 ????						; KyleSpritePtr    word	 
     17  10000 ????						; KyleColorPtr     word
     18  10000 ????						; KyleOffset	    byte	   
     19  10000 ????
     20  10000 ????						; ; define constants
     21  10000 ????
     22  10000 ????						; KYLE_HEIGHT = 9  
     23  10000 ????
     24  10000 ????						; ; start our ROM code at memory address $F000
     25  10000 ????
     26  10000 ????						;     seg Code
     27  10000 ????						;     org $F000
     28  10000 ????
     29  10000 ????						; Reset:
     30  10000 ????						;     CLEAN_START		
     31  10000 ????
     32  10000 ????
     33  10000 ????						; ; inititialize variables
     34  10000 ????
     35  10000 ????						;     lda #50
     36  10000 ????						;     sta KyleXPos		 
     37  10000 ????						;     lda #60
     38  10000 ????						;     sta KyleYPos		  ; set Kyle x and y
     39  10000 ????
     40  10000 ????						;     lda #<KyleSprite
     41  10000 ????						;     sta KyleSpritePtr	 
     42  10000 ????						;     lda #>KyleSprite
     43  10000 ????						;     sta KyleSpritePtr+1	  ; set low and high bytes of the sprite bitmap of Kyle sprite pointer
     44  10000 ????
     45  10000 ????						;     lda #<KyleColor
     46  10000 ????						;     sta KyleColorPtr 	 
     47  10000 ????						;     lda #>KyleColor
     48  10000 ????						;     sta KyleColorPtr+1	  ; set low and high bytes of the color bitmap of Kyle color pointer
     49  10000 ????
     50  10000 ????
     51  10000 ????						; ; main loop
     52  10000 ????
     53  10000 ????						; StartFrame:
     54  10000 ????
     55  10000 ????						; ; display VSYNC and VBLANK
     56  10000 ????
     57  10000 ????						;     lda #2
     58  10000 ????						;     sta VBLANK		  ; turn on VBLANK
     59  10000 ????						;     sta VSYNC		  ; turn on VSYNC
     60  10000 ????
     61  10000 ????						;     sta WSYNC 
     62  10000 ????						;     sta WSYNC 
     63  10000 ????						;     sta WSYNC		  
     64  10000 ????
     65  10000 ????						;     lda #0
     66  10000 ????						;     sta VSYNC		  ; turn off VSYNC
     67  10000 ????
     68  10000 ????						;     ldy #37
     69  10000 ????						; .VBlankLoop:
     70  10000 ????						;     sta WSYNC 
     71  10000 ????						;     dey
     72  10000 ????						;     bne .VBlankLoop
     73  10000 ????
     74  10000 ????						;     sta VBLANK		  ; turn off VBLANK
     75  10000 ????
     76  10000 ????
     77  10000 ????						; ; display scanlines of game
     78  10000 ????
     79  10000 ????						; GameVisibleLine:
     80  10000 ????						;     lda #$0
     81  10000 ????						;     sta COLUBK		  ; set background to black
     82  10000 ????
     83  10000 ????						;     lda #$0E
     84  10000 ????						;     sta COLUPF		; set the terrain background color
     85  10000 ????
     86  10000 ????						;     lda #%00000001
     87  10000 ????						;     sta CTRLPF		; enable playfield reflection
     88  10000 ????						;     lda #0
     89  10000 ????						;     sta PF0			; setting PF0 bit pattern
     90  10000 ????						;     lda #$04
     91  10000 ????						;     sta PF1			; setting PF1 bit pattern
     92  10000 ????						;     lda #0
     93  10000 ????						;     sta PF2			; setting PF2 bit pattern
     94  10000 ????
     95  10000 ????
     96  10000 ????						;     ldx #96			  ; x counts the number of remaining scanlines
     97  10000 ????
     98  10000 ????						; .GameLineLoop:
     99  10000 ????
    100  10000 ????						; .InsideKyleSprite:	       
    101  10000 ????						;     txa			  
    102  10000 ????						;     sec			  
    103  10000 ????						;     sbc KyleYPos		  
    104  10000 ????						;     cmp KYLE_HEIGHT		  
    105  10000 ????						;     bcc .DrawSpriteP0	  
    106  10000 ????						;     lda #0			  ; save a, set carry flag, subtract Kyle position, compare with height, jump to draw if within bounds
    107  10000 ????
    108  10000 ????						; .DrawSpriteP0:
    109  10000 ????						;     clc			
    110  10000 ????						;     adc KyleOffset	     
    111  10000 ????						;     tay			
    112  10000 ????						;     lda (KyleSpritePtr),Y	 
    113  10000 ????						;     sta WSYNC		
    114  10000 ????						;     sta GRP0 		
    115  10000 ????						;     lda (KyleColorPtr),Y	 
    116  10000 ????						;     sta COLUP0		  ; get offset into y, jump to bitmap location for sprite plus y, load player register, jump to color location plus y, load color 
    117  10000 ????
    118  10000 ????						;     sta WSYNC		
    119  10000 ????
    120  10000 ????						;     dex			
    121  10000 ????						;     bne .GameLineLoop	  ; decrement x, if not zero jump back up to GameLineLoop
    122  10000 ????
    123  10000 ????						;     lda #0
    124  10000 ????						;     sta KyleOffset		  ; reset Kyle offset
    125  10000 ????
    126  10000 ????						;     sta WSYNC		
    127  10000 ????
    128  10000 ????						; ; dsplay overscan
    129  10000 ????
    130  10000 ????						;     lda #2
    131  10000 ????						;     sta VBLANK		  ; turn on VBLANK again
    132  10000 ????
    133  10000 ????						;     ldy #37
    134  10000 ????						; .OverScanLoop:
    135  10000 ????						;     sta WSYNC 
    136  10000 ????						;     dey
    137  10000 ????						;     bne .OverScanLoop
    138  10000 ????
    139  10000 ????						;     lda #0
    140  10000 ????						;     sta VBLANK		  ; turn off VBLANK
    141  10000 ????
    142  10000 ????
    143  10000 ????						; ; check joystick
    144  10000 ????
    145  10000 ????						; CheckP0Up:
    146  10000 ????						;     lda #%00010000		  
    147  10000 ????						;     bit SWCHA
    148  10000 ????						;     bne CheckP0Down		
    149  10000 ????						;     inc KyleYPos
    150  10000 ????						;     lda #0
    151  10000 ????						;     sta KyleOffset		  ; check if joystick up is pressed, if so increment y position, else fall through to next check
    152  10000 ????
    153  10000 ????						; CheckP0Down:
    154  10000 ????						;     lda #%00100000	       
    155  10000 ????						;     bit SWCHA
    156  10000 ????						;     bne EndInputCheck	  
    157  10000 ????						;     dec KyleYPos
    158  10000 ????						;     lda #0
    159  10000 ????						;     sta KyleOffset		  ; check if joystick down is pressed, if so decrement y position, else fall through to end checks
    160  10000 ????
    161  10000 ????						; EndInputCheck:
    162  10000 ????
    163  10000 ????						; ; end of main loop, jump back to start 
    164  10000 ????
    165  10000 ????						;     jmp StartFrame		
    166  10000 ????
    167  10000 ????						; ; sprite and color bitmaps
    168  10000 ????
    169  10000 ????						; KyleSprite:
    170  10000 ????						;     .byte #%00000000 	;
    171  10000 ????						;     .byte #%00001111 	; #####  
    172  10000 ????						;     .byte #%00001111 	; #####
    173  10000 ????						;     .byte #%00001111 	; #####
    174  10000 ????						;     .byte #%00001111 	; #####
    175  10000 ????						;     .byte #%00001111 	; #####
    176  10000 ????						;     .byte #%00001111 	; ##### 
    177  10000 ????						;     .byte #%00001111 	; #####   
    178  10000 ????						;     .byte #%00001111 	; #####   
    179  10000 ????
    180  10000 ????						; KyleColor:
    181  10000 ????						;     .byte #$00
    182  10000 ????						;     .byte #$0E
    183  10000 ????						;     .byte #$0E
    184  10000 ????						;     .byte #$0E
    185  10000 ????						;     .byte #$0E
    186  10000 ????						;     .byte #$0E
    187  10000 ????						;     .byte #$0E
    188  10000 ????						;     .byte #$0E
    189  10000 ????						;     .byte #$0E
    190  10000 ????
    191  10000 ????						; ; complete ROM size with exactly 4KB
    192  10000 ????
    193  10000 ????						;     org $FFFC		; move to position $FFFC
    194  10000 ????						;     word Reset		; write 2 bytes with the program reset address
    195  10000 ????						;     word Reset		; write 2 bytes with the interruption vector
    196  10000 ????
    197  10000 ????
    198  10000 ????
    199  10000 ????
    200  10000 ????
    201  10000 ????
    202  10000 ????
    203  10000 ????
    204  10000 ????
    205  10000 ????
    206  10000 ????
    207  10000 ????
    208  10000 ????
    209  10000 ????
    210  10000 ????
    211  10000 ????
    212  10000 ????
    213  10000 ????
    214  10000 ????
    215  10000 ????
    216  10000 ????				       processor	6502
    217  10000 ????
    218  10000 ????						; include required files with VCS register memory mapping and macros
    219  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE game.asm
    221  0000 ????
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE game.asm
    223  0000 ????
    224  0000 ????
    225  0000 ????						; declare the variables starting from memory address $80
    226  0000 ????
    227 U0087 ????				      seg.u	Variables
    228 U0080					      org	$80
    229 U0080
    230 U0080		       00	   KyleXPos   byte.b
    231 U0081		       00	   KyleYPos   byte.b
    232 U0082		       00 00	   KyleSpritePtr word.w
    233 U0084		       00 00	   KyleColorPtr word.w
    234 U0086		       00	   KyleOffset byte.b
    235 U0087
    236 U0087							; define constants
    237 U0087
    238 U0087		       00 09	   KYLE_HEIGHT =	9
    239 U0087
    240 U0087							; start our ROM code at memory address $F000
    241 U0087
    242  10000 ????				       seg	Code
    243  f000					      org	$F000
    244  f000
    245  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
    247  f00b
    248  f00b
    249  f00b							; inititialize variables
    250  f00b
    251  f00b		       a9 32		      lda	#50
    252  f00d		       85 80		      sta	KyleXPos
    253  f00f		       a9 3c		      lda	#60
    254  f011		       85 81		      sta	KyleYPos	; set Kyle x and y
    255  f013
    256  f013		       a9 8c		      lda	#<KyleSprite
    257  f015		       85 82		      sta	KyleSpritePtr
    258  f017		       a9 f2		      lda	#>KyleSprite
    259  f019		       85 83		      sta	KyleSpritePtr+1	; set low and high bytes of the sprite bitmap of Kyle sprite pointer
    260  f01b
    261  f01b		       a9 95		      lda	#<KyleColor
    262  f01d		       85 84		      sta	KyleColorPtr
    263  f01f		       a9 f2		      lda	#>KyleColor
    264  f021		       85 85		      sta	KyleColorPtr+1	; set low and high bytes of the color bitmap of Kyle color pointer
    265  f023
    266  f023
    267  f023							; main loop
    268  f023
    269  f023				   StartFrame
    270  f023
    271  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    272  f023							;; Start a new frame by configuring VBLANK and VSYNC
    273  f023							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    274  f023
    275  f023		       a9 02		      lda	#02
    276  f025		       85 01		      sta	VBLANK	; turn on VBLANK
    277  f027		       85 00		      sta	VSYNC	; turn on VSYNC
    278  f029
    279  f029							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    280  f029							;; Generate the three lines of VSYNC
    281  f029							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    282  f029		       85 02		      sta	WSYNC
    283  f02b		       85 02		      sta	WSYNC
    284  f02d		       85 02		      sta	WSYNC
    285  f02f
    286  f02f		       a9 00		      lda	#0
    287  f031		       85 00		      sta	VSYNC	; turn off VSYNC
    288  f033							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    289  f033							;; Let the TIA output the 37 recommended lines of VBLANK
    290  f033							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    291  f033		       a0 25		      ldy	#37
    292  f035				   .VBlankLoop
    293  f035		       85 02		      sta	WSYNC
    294  f037		       88		      dey
    295  f038		       d0 fb		      bne	.VBlankLoop
    296  f03a
    297  f03a		       a9 00		      lda	#0
    298  f03c		       85 01		      sta	VBLANK	; turn VBLANK off
    299  f03e
    300  f03e							;
    301  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    302  f03e							;; Set the CTRLPF register to allow playfield reflect
    303  f03e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    304  f03e		       a9 01		      lda	#%00000001	; CTRLPF register (D0 is the reflect flag)
    305  f040		       85 0a		      sta	CTRLPF	; enable playfield reflection
    306  f042							;-----------------------------------------------------------------------------
    307  f042
    308  f042							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    309  f042							;; Draw the 192 visible scanlines
    310  f042							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    311  f042
    312  f042							; Skip 7 scanlines with no PF set
    313  f042		       a2 00		      ldx	#0
    314  f044		       86 0d		      stx	PF0
    315  f046		       86 0e		      stx	PF1
    316  f048		       86 0f		      stx	PF2
    317  f04a					      REPEAT	7
    318  f04a		       85 02		      sta	WSYNC
    317  f04a					      REPEND
    318  f04c		       85 02		      sta	WSYNC
    317  f04c					      REPEND
    318  f04e		       85 02		      sta	WSYNC
    317  f04e					      REPEND
    318  f050		       85 02		      sta	WSYNC
    317  f050					      REPEND
    318  f052		       85 02		      sta	WSYNC
    317  f052					      REPEND
    318  f054		       85 02		      sta	WSYNC
    317  f054					      REPEND
    318  f056		       85 02		      sta	WSYNC
    319  f058					      REPEND
    320  f058
    321  f058							;------------------------------------------------------------------------------	
    322  f058
    323  f058		       a2 59		      ldx	#89	; x counts the number of remaining scanlines
    324  f05a
    325  f05a				   PlayfieldLoop
    326  f05a		       85 02		      sta	WSYNC	; 3	 (0)
    327  f05c		       bd 32 f2 	      lda	PFColors,x	; 4	 (4)
    328  f05f		       85 08		      sta	COLUPF	; 3	 (7)
    329  f061		       bd 24 f1 	      lda	PF0DataA,x	; 4	 (11)
    330  f064		       85 0d		      sta	PF0	; 3	 (14)
    331  f066		       bd 7e f1 	      lda	PF1DataA,x	; 4	 (18)
    332  f069		       85 0e		      sta	PF1	; 3	 (21)
    333  f06b		       bd d8 f1 	      lda	PF2DataA,x	; 4	 (25*)
    334  f06e		       85 0f		      sta	PF2	; 3	 (28)
    335  f070
    336  f070
    337  f070
    338  f070
    339  f070
    340  f070				   .InsideKyleSprite
    341  f070		       8a		      txa
    342  f071		       38		      sec
    343  f072		       e5 81		      sbc	KyleYPos
    344  f074		       c5 09		      cmp	KYLE_HEIGHT
    345  f076		       90 02		      bcc	.DrawSpriteP0
    346  f078		       a9 00		      lda	#0	; save a, set carry flag, subtract Kyle position, compare with height, jump to draw if within bounds
    347  f07a
    348  f07a				   .DrawSpriteP0
    349  f07a		       18		      clc
    350  f07b		       65 86		      adc	KyleOffset
    351  f07d		       a8		      tay
    352  f07e		       b1 82		      lda	(KyleSpritePtr),Y
    353  f080		       85 02		      sta	WSYNC
    354  f082		       85 1b		      sta	GRP0
    355  f084		       b1 84		      lda	(KyleColorPtr),Y
    356  f086		       85 06		      sta	COLUP0	; get offset into y, jump to bitmap location for sprite plus y, load player register, jump to color location plus y, load color 
    357  f088
    358  f088
    359  f088
    360  f088
    361  f088
    362  f088
    363  f088
    364  f088
    365  f088
    366  f088
    367  f088		       ca		      dex		; 2	 (65)
    368  f089		       d0 cf		      bne	PlayfieldLoop
    369  f08b
    370  f08b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    371  f08b							;; Output 49 more VBLANK overscan lines to complete our frame
    372  f08b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    373  f08b		       a9 02		      lda	#2
    374  f08d		       85 01		      sta	VBLANK	; enable VBLANK back again
    375  f08f					      REPEAT	49
    376  f08f		       85 02		      sta	WSYNC
    375  f08f					      REPEND
    376  f091		       85 02		      sta	WSYNC
    375  f091					      REPEND
    376  f093		       85 02		      sta	WSYNC
    375  f093					      REPEND
    376  f095		       85 02		      sta	WSYNC
    375  f095					      REPEND
    376  f097		       85 02		      sta	WSYNC
    375  f097					      REPEND
    376  f099		       85 02		      sta	WSYNC
    375  f099					      REPEND
    376  f09b		       85 02		      sta	WSYNC
    375  f09b					      REPEND
    376  f09d		       85 02		      sta	WSYNC
    375  f09d					      REPEND
    376  f09f		       85 02		      sta	WSYNC
    375  f09f					      REPEND
    376  f0a1		       85 02		      sta	WSYNC
    375  f0a1					      REPEND
    376  f0a3		       85 02		      sta	WSYNC
    375  f0a3					      REPEND
    376  f0a5		       85 02		      sta	WSYNC
    375  f0a5					      REPEND
    376  f0a7		       85 02		      sta	WSYNC
    375  f0a7					      REPEND
    376  f0a9		       85 02		      sta	WSYNC
    375  f0a9					      REPEND
    376  f0ab		       85 02		      sta	WSYNC
    375  f0ab					      REPEND
    376  f0ad		       85 02		      sta	WSYNC
    375  f0ad					      REPEND
    376  f0af		       85 02		      sta	WSYNC
    375  f0af					      REPEND
    376  f0b1		       85 02		      sta	WSYNC
    375  f0b1					      REPEND
    376  f0b3		       85 02		      sta	WSYNC
    375  f0b3					      REPEND
    376  f0b5		       85 02		      sta	WSYNC
    375  f0b5					      REPEND
    376  f0b7		       85 02		      sta	WSYNC
    375  f0b7					      REPEND
    376  f0b9		       85 02		      sta	WSYNC
    375  f0b9					      REPEND
    376  f0bb		       85 02		      sta	WSYNC
    375  f0bb					      REPEND
    376  f0bd		       85 02		      sta	WSYNC
    375  f0bd					      REPEND
    376  f0bf		       85 02		      sta	WSYNC
    375  f0bf					      REPEND
    376  f0c1		       85 02		      sta	WSYNC
    375  f0c1					      REPEND
    376  f0c3		       85 02		      sta	WSYNC
    375  f0c3					      REPEND
    376  f0c5		       85 02		      sta	WSYNC
    375  f0c5					      REPEND
    376  f0c7		       85 02		      sta	WSYNC
    375  f0c7					      REPEND
    376  f0c9		       85 02		      sta	WSYNC
    375  f0c9					      REPEND
    376  f0cb		       85 02		      sta	WSYNC
    375  f0cb					      REPEND
    376  f0cd		       85 02		      sta	WSYNC
    375  f0cd					      REPEND
    376  f0cf		       85 02		      sta	WSYNC
    375  f0cf					      REPEND
    376  f0d1		       85 02		      sta	WSYNC
    375  f0d1					      REPEND
    376  f0d3		       85 02		      sta	WSYNC
    375  f0d3					      REPEND
    376  f0d5		       85 02		      sta	WSYNC
    375  f0d5					      REPEND
    376  f0d7		       85 02		      sta	WSYNC
    375  f0d7					      REPEND
    376  f0d9		       85 02		      sta	WSYNC
    375  f0d9					      REPEND
    376  f0db		       85 02		      sta	WSYNC
    375  f0db					      REPEND
    376  f0dd		       85 02		      sta	WSYNC
    375  f0dd					      REPEND
    376  f0df		       85 02		      sta	WSYNC
    375  f0df					      REPEND
    376  f0e1		       85 02		      sta	WSYNC
    375  f0e1					      REPEND
    376  f0e3		       85 02		      sta	WSYNC
    375  f0e3					      REPEND
    376  f0e5		       85 02		      sta	WSYNC
    375  f0e5					      REPEND
    376  f0e7		       85 02		      sta	WSYNC
    375  f0e7					      REPEND
    376  f0e9		       85 02		      sta	WSYNC
    375  f0e9					      REPEND
    376  f0eb		       85 02		      sta	WSYNC
    375  f0eb					      REPEND
    376  f0ed		       85 02		      sta	WSYNC
    375  f0ed					      REPEND
    376  f0ef		       85 02		      sta	WSYNC
    377  f0f1					      REPEND
    378  f0f1
    379  f0f1							; Skip 7 scanlines with no PF set
    380  f0f1		       a2 00		      ldx	#0
    381  f0f3		       86 0d		      stx	PF0
    382  f0f5		       86 0e		      stx	PF1
    383  f0f7		       86 0f		      stx	PF2
    384  f0f9					      REPEAT	7
    385  f0f9		       85 02		      sta	WSYNC
    384  f0f9					      REPEND
    385  f0fb		       85 02		      sta	WSYNC
    384  f0fb					      REPEND
    385  f0fd		       85 02		      sta	WSYNC
    384  f0fd					      REPEND
    385  f0ff		       85 02		      sta	WSYNC
    384  f0ff					      REPEND
    385  f101		       85 02		      sta	WSYNC
    384  f101					      REPEND
    385  f103		       85 02		      sta	WSYNC
    384  f103					      REPEND
    385  f105		       85 02		      sta	WSYNC
    386  f107					      REPEND
    387  f107
    388  f107
    389  f107
    390  f107
    391  f107							; check joystick
    392  f107
    393  f107				   CheckP0Up
    394  f107		       a9 10		      lda	#%00010000
    395  f109		       2c 80 02 	      bit	SWCHA
    396  f10c		       d0 06		      bne	CheckP0Down
    397  f10e		       e6 81		      inc	KyleYPos
    398  f110		       a9 00		      lda	#0
    399  f112		       85 86		      sta	KyleOffset	; check if joystick up is pressed, if so increment y position, else fall through to next check
    400  f114
    401  f114				   CheckP0Down
    402  f114		       a9 20		      lda	#%00100000
    403  f116		       2c 80 02 	      bit	SWCHA
    404  f119		       d0 06		      bne	EndInputCheck
    405  f11b		       c6 81		      dec	KyleYPos
    406  f11d		       a9 00		      lda	#0
    407  f11f		       85 86		      sta	KyleOffset	; check if joystick down is pressed, if so decrement y position, else fall through to end checks
    408  f121
    409  f121				   EndInputCheck
    410  f121
    411  f121
    412  f121
    413  f121							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    414  f121							;; Loop to next frame
    415  f121							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    416  f121		       4c 23 f0 	      jmp	StartFrame
    417  f124
    418  f124				   PF0DataA
    419  f124		       00		      .byte.b	%00000000
    420  f125		       00		      .byte.b	%00000000
    421  f126		       00		      .byte.b	%00000000
    422  f127		       00		      .byte.b	%00000000
    423  f128		       80		      .byte.b	%10000000
    424  f129		       80		      .byte.b	%10000000
    425  f12a		       80		      .byte.b	%10000000
    426  f12b		       80		      .byte.b	%10000000
    427  f12c		       80		      .byte.b	%10000000
    428  f12d		       80		      .byte.b	%10000000
    429  f12e		       80		      .byte.b	%10000000
    430  f12f		       80		      .byte.b	%10000000
    431  f130		       80		      .byte.b	%10000000
    432  f131		       80		      .byte.b	%10000000
    433  f132		       80		      .byte.b	%10000000
    434  f133		       80		      .byte.b	%10000000
    435  f134		       80		      .byte.b	%10000000
    436  f135		       80		      .byte.b	%10000000
    437  f136		       80		      .byte.b	%10000000
    438  f137		       80		      .byte.b	%10000000
    439  f138		       80		      .byte.b	%10000000
    440  f139		       80		      .byte.b	%10000000
    441  f13a		       80		      .byte.b	%10000000
    442  f13b		       00		      .byte.b	%00000000
    443  f13c		       00		      .byte.b	%00000000
    444  f13d		       00		      .byte.b	%00000000
    445  f13e		       00		      .byte.b	%00000000
    446  f13f		       00		      .byte.b	%00000000
    447  f140		       00		      .byte.b	%00000000
    448  f141		       00		      .byte.b	%00000000
    449  f142		       00		      .byte.b	%00000000
    450  f143		       00		      .byte.b	%00000000
    451  f144		       00		      .byte.b	%00000000
    452  f145		       00		      .byte.b	%00000000
    453  f146		       00		      .byte.b	%00000000
    454  f147		       00		      .byte.b	%00000000
    455  f148		       00		      .byte.b	%00000000
    456  f149		       00		      .byte.b	%00000000
    457  f14a		       00		      .byte.b	%00000000
    458  f14b		       00		      .byte.b	%00000000
    459  f14c		       00		      .byte.b	%00000000
    460  f14d		       00		      .byte.b	%00000000
    461  f14e		       00		      .byte.b	%00000000
    462  f14f		       00		      .byte.b	%00000000
    463  f150		       00		      .byte.b	%00000000
    464  f151		       00		      .byte.b	%00000000
    465  f152		       00		      .byte.b	%00000000
    466  f153		       00		      .byte.b	%00000000
    467  f154		       00		      .byte.b	%00000000
    468  f155		       00		      .byte.b	%00000000
    469  f156		       00		      .byte.b	%00000000
    470  f157		       00		      .byte.b	%00000000
    471  f158		       00		      .byte.b	%00000000
    472  f159		       00		      .byte.b	%00000000
    473  f15a		       00		      .byte.b	%00000000
    474  f15b		       00		      .byte.b	%00000000
    475  f15c		       00		      .byte.b	%00000000
    476  f15d		       00		      .byte.b	%00000000
    477  f15e		       00		      .byte.b	%00000000
    478  f15f		       00		      .byte.b	%00000000
    479  f160		       00		      .byte.b	%00000000
    480  f161		       00		      .byte.b	%00000000
    481  f162		       00		      .byte.b	%00000000
    482  f163		       00		      .byte.b	%00000000
    483  f164		       00		      .byte.b	%00000000
    484  f165		       00		      .byte.b	%00000000
    485  f166		       80		      .byte.b	%10000000
    486  f167		       80		      .byte.b	%10000000
    487  f168		       80		      .byte.b	%10000000
    488  f169		       80		      .byte.b	%10000000
    489  f16a		       80		      .byte.b	%10000000
    490  f16b		       80		      .byte.b	%10000000
    491  f16c		       80		      .byte.b	%10000000
    492  f16d		       80		      .byte.b	%10000000
    493  f16e		       80		      .byte.b	%10000000
    494  f16f		       80		      .byte.b	%10000000
    495  f170		       80		      .byte.b	%10000000
    496  f171		       80		      .byte.b	%10000000
    497  f172		       80		      .byte.b	%10000000
    498  f173		       80		      .byte.b	%10000000
    499  f174		       80		      .byte.b	%10000000
    500  f175		       80		      .byte.b	%10000000
    501  f176		       80		      .byte.b	%10000000
    502  f177		       80		      .byte.b	%10000000
    503  f178		       80		      .byte.b	%10000000
    504  f179		       00		      .byte.b	%00000000
    505  f17a		       00		      .byte.b	%00000000
    506  f17b		       00		      .byte.b	%00000000
    507  f17c		       00		      .byte.b	%00000000
    508  f17d		       00		      .byte.b	%00000000
    509  f17e
    510  f17e
    511  f17e							;    if >. != >[.+(PLAY_FIELD_LINES)]
    512  f17e							;	 align 256
    513  f17e							;    endif
    514  f17e
    515  f17e				   PF1DataA
    516  f17e		       00		      .byte.b	%00000000
    517  f17f		       00		      .byte.b	%00000000
    518  f180		       00		      .byte.b	%00000000
    519  f181		       00		      .byte.b	%00000000
    520  f182		       f0		      .byte.b	%11110000
    521  f183		       f0		      .byte.b	%11110000
    522  f184		       10		      .byte.b	%00010000
    523  f185		       10		      .byte.b	%00010000
    524  f186		       10		      .byte.b	%00010000
    525  f187		       10		      .byte.b	%00010000
    526  f188		       10		      .byte.b	%00010000
    527  f189		       10		      .byte.b	%00010000
    528  f18a		       10		      .byte.b	%00010000
    529  f18b		       10		      .byte.b	%00010000
    530  f18c		       10		      .byte.b	%00010000
    531  f18d		       10		      .byte.b	%00010000
    532  f18e		       10		      .byte.b	%00010000
    533  f18f		       10		      .byte.b	%00010000
    534  f190		       10		      .byte.b	%00010000
    535  f191		       10		      .byte.b	%00010000
    536  f192		       10		      .byte.b	%00010000
    537  f193		       f0		      .byte.b	%11110000
    538  f194		       f0		      .byte.b	%11110000
    539  f195		       00		      .byte.b	%00000000
    540  f196		       00		      .byte.b	%00000000
    541  f197		       00		      .byte.b	%00000000
    542  f198		       00		      .byte.b	%00000000
    543  f199		       00		      .byte.b	%00000000
    544  f19a		       00		      .byte.b	%00000000
    545  f19b		       00		      .byte.b	%00000000
    546  f19c		       00		      .byte.b	%00000000
    547  f19d		       00		      .byte.b	%00000000
    548  f19e		       00		      .byte.b	%00000000
    549  f19f		       00		      .byte.b	%00000000
    550  f1a0		       00		      .byte.b	%00000000
    551  f1a1		       00		      .byte.b	%00000000
    552  f1a2		       00		      .byte.b	%00000000
    553  f1a3		       00		      .byte.b	%00000000
    554  f1a4		       00		      .byte.b	%00000000
    555  f1a5		       00		      .byte.b	%00000000
    556  f1a6		       00		      .byte.b	%00000000
    557  f1a7		       00		      .byte.b	%00000000
    558  f1a8		       00		      .byte.b	%00000000
    559  f1a9		       00		      .byte.b	%00000000
    560  f1aa		       00		      .byte.b	%00000000
    561  f1ab		       00		      .byte.b	%00000000
    562  f1ac		       00		      .byte.b	%00000000
    563  f1ad		       00		      .byte.b	%00000000
    564  f1ae		       00		      .byte.b	%00000000
    565  f1af		       00		      .byte.b	%00000000
    566  f1b0		       00		      .byte.b	%00000000
    567  f1b1		       00		      .byte.b	%00000000
    568  f1b2		       00		      .byte.b	%00000000
    569  f1b3		       00		      .byte.b	%00000000
    570  f1b4		       00		      .byte.b	%00000000
    571  f1b5		       00		      .byte.b	%00000000
    572  f1b6		       00		      .byte.b	%00000000
    573  f1b7		       00		      .byte.b	%00000000
    574  f1b8		       00		      .byte.b	%00000000
    575  f1b9		       00		      .byte.b	%00000000
    576  f1ba		       00		      .byte.b	%00000000
    577  f1bb		       00		      .byte.b	%00000000
    578  f1bc		       00		      .byte.b	%00000000
    579  f1bd		       00		      .byte.b	%00000000
    580  f1be		       00		      .byte.b	%00000000
    581  f1bf		       00		      .byte.b	%00000000
    582  f1c0		       f0		      .byte.b	%11110000
    583  f1c1		       f0		      .byte.b	%11110000
    584  f1c2		       10		      .byte.b	%00010000
    585  f1c3		       10		      .byte.b	%00010000
    586  f1c4		       10		      .byte.b	%00010000
    587  f1c5		       10		      .byte.b	%00010000
    588  f1c6		       10		      .byte.b	%00010000
    589  f1c7		       10		      .byte.b	%00010000
    590  f1c8		       10		      .byte.b	%00010000
    591  f1c9		       10		      .byte.b	%00010000
    592  f1ca		       10		      .byte.b	%00010000
    593  f1cb		       10		      .byte.b	%00010000
    594  f1cc		       10		      .byte.b	%00010000
    595  f1cd		       10		      .byte.b	%00010000
    596  f1ce		       10		      .byte.b	%00010000
    597  f1cf		       10		      .byte.b	%00010000
    598  f1d0		       10		      .byte.b	%00010000
    599  f1d1		       f0		      .byte.b	%11110000
    600  f1d2		       f0		      .byte.b	%11110000
    601  f1d3		       00		      .byte.b	%00000000
    602  f1d4		       00		      .byte.b	%00000000
    603  f1d5		       00		      .byte.b	%00000000
    604  f1d6		       00		      .byte.b	%00000000
    605  f1d7		       00		      .byte.b	%00000000
    606  f1d8
    607  f1d8
    608  f1d8							;    if >. != >[.+(PLAY_FIELD_LINES)]
    609  f1d8							;	 align 256
    610  f1d8							;    endif
    611  f1d8
    612  f1d8				   PF2DataA
    613  f1d8		       00		      .byte.b	%00000000
    614  f1d9		       00		      .byte.b	%00000000
    615  f1da		       00		      .byte.b	%00000000
    616  f1db		       00		      .byte.b	%00000000
    617  f1dc		       00		      .byte.b	%00000000
    618  f1dd		       00		      .byte.b	%00000000
    619  f1de		       00		      .byte.b	%00000000
    620  f1df		       00		      .byte.b	%00000000
    621  f1e0		       00		      .byte.b	%00000000
    622  f1e1		       00		      .byte.b	%00000000
    623  f1e2		       00		      .byte.b	%00000000
    624  f1e3		       00		      .byte.b	%00000000
    625  f1e4		       00		      .byte.b	%00000000
    626  f1e5		       00		      .byte.b	%00000000
    627  f1e6		       00		      .byte.b	%00000000
    628  f1e7		       00		      .byte.b	%00000000
    629  f1e8		       00		      .byte.b	%00000000
    630  f1e9		       00		      .byte.b	%00000000
    631  f1ea		       00		      .byte.b	%00000000
    632  f1eb		       00		      .byte.b	%00000000
    633  f1ec		       00		      .byte.b	%00000000
    634  f1ed		       00		      .byte.b	%00000000
    635  f1ee		       00		      .byte.b	%00000000
    636  f1ef		       00		      .byte.b	%00000000
    637  f1f0		       00		      .byte.b	%00000000
    638  f1f1		       00		      .byte.b	%00000000
    639  f1f2		       00		      .byte.b	%00000000
    640  f1f3		       00		      .byte.b	%00000000
    641  f1f4		       00		      .byte.b	%00000000
    642  f1f5		       00		      .byte.b	%00000000
    643  f1f6		       00		      .byte.b	%00000000
    644  f1f7		       00		      .byte.b	%00000000
    645  f1f8		       00		      .byte.b	%00000000
    646  f1f9		       00		      .byte.b	%00000000
    647  f1fa		       00		      .byte.b	%00000000
    648  f1fb		       00		      .byte.b	%00000000
    649  f1fc		       00		      .byte.b	%00000000
    650  f1fd		       00		      .byte.b	%00000000
    651  f1fe		       00		      .byte.b	%00000000
    652  f1ff		       00		      .byte.b	%00000000
    653  f200		       00		      .byte.b	%00000000
    654  f201		       00		      .byte.b	%00000000
    655  f202		       00		      .byte.b	%00000000
    656  f203		       00		      .byte.b	%00000000
    657  f204		       00		      .byte.b	%00000000
    658  f205		       00		      .byte.b	%00000000
    659  f206		       00		      .byte.b	%00000000
    660  f207		       00		      .byte.b	%00000000
    661  f208		       00		      .byte.b	%00000000
    662  f209		       00		      .byte.b	%00000000
    663  f20a		       00		      .byte.b	%00000000
    664  f20b		       00		      .byte.b	%00000000
    665  f20c		       00		      .byte.b	%00000000
    666  f20d		       00		      .byte.b	%00000000
    667  f20e		       00		      .byte.b	%00000000
    668  f20f		       00		      .byte.b	%00000000
    669  f210		       00		      .byte.b	%00000000
    670  f211		       00		      .byte.b	%00000000
    671  f212		       00		      .byte.b	%00000000
    672  f213		       00		      .byte.b	%00000000
    673  f214		       00		      .byte.b	%00000000
    674  f215		       00		      .byte.b	%00000000
    675  f216		       00		      .byte.b	%00000000
    676  f217		       00		      .byte.b	%00000000
    677  f218		       00		      .byte.b	%00000000
    678  f219		       00		      .byte.b	%00000000
    679  f21a		       00		      .byte.b	%00000000
    680  f21b		       00		      .byte.b	%00000000
    681  f21c		       00		      .byte.b	%00000000
    682  f21d		       00		      .byte.b	%00000000
    683  f21e		       00		      .byte.b	%00000000
    684  f21f		       00		      .byte.b	%00000000
    685  f220		       00		      .byte.b	%00000000
    686  f221		       00		      .byte.b	%00000000
    687  f222		       00		      .byte.b	%00000000
    688  f223		       00		      .byte.b	%00000000
    689  f224		       00		      .byte.b	%00000000
    690  f225		       00		      .byte.b	%00000000
    691  f226		       00		      .byte.b	%00000000
    692  f227		       00		      .byte.b	%00000000
    693  f228		       00		      .byte.b	%00000000
    694  f229		       00		      .byte.b	%00000000
    695  f22a		       00		      .byte.b	%00000000
    696  f22b		       00		      .byte.b	%00000000
    697  f22c		       00		      .byte.b	%00000000
    698  f22d		       00		      .byte.b	%00000000
    699  f22e		       00		      .byte.b	%00000000
    700  f22f		       00		      .byte.b	%00000000
    701  f230		       00		      .byte.b	%00000000
    702  f231		       00		      .byte.b	%00000000
    703  f232
    704  f232
    705  f232							;    if >. != >[.+(PLAY_FIELD_LINES)]
    706  f232							;	 align 256
    707  f232							;    endif
    708  f232
    709  f232				   PFColors
    710  f232		       0e		      .byte.b	$0E
    711  f233		       0e		      .byte.b	$0E
    712  f234		       0e		      .byte.b	$0E
    713  f235		       0e		      .byte.b	$0E
    714  f236		       0e		      .byte.b	$0E
    715  f237		       0e		      .byte.b	$0E
    716  f238		       0e		      .byte.b	$0E
    717  f239		       0e		      .byte.b	$0E
    718  f23a		       0e		      .byte.b	$0E
    719  f23b		       0e		      .byte.b	$0E
    720  f23c		       0e		      .byte.b	$0E
    721  f23d		       0e		      .byte.b	$0E
    722  f23e		       0e		      .byte.b	$0E
    723  f23f		       0e		      .byte.b	$0E
    724  f240		       0e		      .byte.b	$0E
    725  f241		       0e		      .byte.b	$0E
    726  f242		       0e		      .byte.b	$0E
    727  f243		       0e		      .byte.b	$0E
    728  f244		       0e		      .byte.b	$0E
    729  f245		       0e		      .byte.b	$0E
    730  f246		       0e		      .byte.b	$0E
    731  f247		       0e		      .byte.b	$0E
    732  f248		       0e		      .byte.b	$0E
    733  f249		       0e		      .byte.b	$0E
    734  f24a		       0e		      .byte.b	$0E
    735  f24b		       0e		      .byte.b	$0E
    736  f24c		       0e		      .byte.b	$0E
    737  f24d		       0e		      .byte.b	$0E
    738  f24e		       0e		      .byte.b	$0E
    739  f24f		       0e		      .byte.b	$0E
    740  f250		       0e		      .byte.b	$0E
    741  f251		       0e		      .byte.b	$0E
    742  f252		       0e		      .byte.b	$0E
    743  f253		       0e		      .byte.b	$0E
    744  f254		       0e		      .byte.b	$0E
    745  f255		       0e		      .byte.b	$0E
    746  f256		       0e		      .byte.b	$0E
    747  f257		       0e		      .byte.b	$0E
    748  f258		       0e		      .byte.b	$0E
    749  f259		       0e		      .byte.b	$0E
    750  f25a		       0e		      .byte.b	$0E
    751  f25b		       0e		      .byte.b	$0E
    752  f25c		       0e		      .byte.b	$0E
    753  f25d		       0e		      .byte.b	$0E
    754  f25e		       0e		      .byte.b	$0E
    755  f25f		       0e		      .byte.b	$0E
    756  f260		       0e		      .byte.b	$0E
    757  f261		       0e		      .byte.b	$0E
    758  f262		       0e		      .byte.b	$0E
    759  f263		       0e		      .byte.b	$0E
    760  f264		       0e		      .byte.b	$0E
    761  f265		       0e		      .byte.b	$0E
    762  f266		       0e		      .byte.b	$0E
    763  f267		       0e		      .byte.b	$0E
    764  f268		       0e		      .byte.b	$0E
    765  f269		       0e		      .byte.b	$0E
    766  f26a		       0e		      .byte.b	$0E
    767  f26b		       0e		      .byte.b	$0E
    768  f26c		       0e		      .byte.b	$0E
    769  f26d		       0e		      .byte.b	$0E
    770  f26e		       0e		      .byte.b	$0E
    771  f26f		       0e		      .byte.b	$0E
    772  f270		       0e		      .byte.b	$0E
    773  f271		       0e		      .byte.b	$0E
    774  f272		       0e		      .byte.b	$0E
    775  f273		       0e		      .byte.b	$0E
    776  f274		       0e		      .byte.b	$0E
    777  f275		       0e		      .byte.b	$0E
    778  f276		       0e		      .byte.b	$0E
    779  f277		       0e		      .byte.b	$0E
    780  f278		       0e		      .byte.b	$0E
    781  f279		       0e		      .byte.b	$0E
    782  f27a		       0e		      .byte.b	$0E
    783  f27b		       0e		      .byte.b	$0E
    784  f27c		       0e		      .byte.b	$0E
    785  f27d		       0e		      .byte.b	$0E
    786  f27e		       0e		      .byte.b	$0E
    787  f27f		       0e		      .byte.b	$0E
    788  f280		       0e		      .byte.b	$0E
    789  f281		       0e		      .byte.b	$0E
    790  f282		       0e		      .byte.b	$0E
    791  f283		       0e		      .byte.b	$0E
    792  f284		       0e		      .byte.b	$0E
    793  f285		       0e		      .byte.b	$0E
    794  f286		       0e		      .byte.b	$0E
    795  f287		       0e		      .byte.b	$0E
    796  f288		       0e		      .byte.b	$0E
    797  f289		       0e		      .byte.b	$0E
    798  f28a		       0e		      .byte.b	$0E
    799  f28b		       0e		      .byte.b	$0E
    800  f28c
    801  f28c
    802  f28c				   KyleSprite
    803  f28c		       00		      .byte.b	#%00000000	;
    804  f28d		       0f		      .byte.b	#%00001111	; #####  
    805  f28e		       0f		      .byte.b	#%00001111	; #####
    806  f28f		       0f		      .byte.b	#%00001111	; #####
    807  f290		       0f		      .byte.b	#%00001111	; #####
    808  f291		       0f		      .byte.b	#%00001111	; #####
    809  f292		       0f		      .byte.b	#%00001111	; ##### 
    810  f293		       0f		      .byte.b	#%00001111	; #####   
    811  f294		       0f		      .byte.b	#%00001111	; #####   
    812  f295
    813  f295				   KyleColor
    814  f295		       00		      .byte.b	#$00
    815  f296		       0e		      .byte.b	#$0E
    816  f297		       0e		      .byte.b	#$0E
    817  f298		       0e		      .byte.b	#$0E
    818  f299		       0e		      .byte.b	#$0E
    819  f29a		       0e		      .byte.b	#$0E
    820  f29b		       0e		      .byte.b	#$0E
    821  f29c		       0e		      .byte.b	#$0E
    822  f29d		       0e		      .byte.b	#$0E
    823  f29e
    824  f29e
    825  f29e
    826  f29e							; complete ROM size with exactly 4KB
    827  f29e
    828  fffc					      org	$FFFC	; move to position $FFFC
    829  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    830  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
    831  10000
    832  10000
    833  10000
    834  10000
